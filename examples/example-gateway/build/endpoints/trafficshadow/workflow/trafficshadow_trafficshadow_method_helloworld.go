// Code generated by zanzibar
// @generated

// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package workflow

import (
	"context"
	"net/textproto"

	"github.com/uber/zanzibar/config"

	zanzibar "github.com/uber/zanzibar/runtime"

	clientsIDlClientsTrafficshadowclient1Trafficshadowclient1 "github.com/uber/zanzibar/examples/example-gateway/build/gen-code/clients-idl/clients/trafficshadowclient1/trafficshadowclient1"
	endpointsIDlEndpointsTrafficshadowTrafficshadow "github.com/uber/zanzibar/examples/example-gateway/build/gen-code/endpoints-idl/endpoints/trafficshadow/trafficshadow"

	clientsIDlClientsTrafficshadowclient2Trafficshadowclient2 "github.com/uber/zanzibar/examples/example-gateway/build/gen-code/clients-idl/clients/trafficshadowclient2/trafficshadowclient2"

	module "github.com/uber/zanzibar/examples/example-gateway/build/endpoints/trafficshadow/module"
	"go.uber.org/zap"
)

// TrafficshadowHelloWorldWorkflow defines the interface for TrafficshadowHelloWorld workflow
type TrafficshadowHelloWorldWorkflow interface {
	Handle(
		ctx context.Context,
		reqHeaders zanzibar.Header,
	) (*endpointsIDlEndpointsTrafficshadowTrafficshadow.TrafficShadowResponse, zanzibar.Header, error)
}

// NewTrafficshadowHelloWorldWorkflow creates a workflow
func NewTrafficshadowHelloWorldWorkflow(deps *module.Dependencies) TrafficshadowHelloWorldWorkflow {
	var whitelistedDynamicHeaders []string
	if deps.Default.Config.ContainsKey("clients.trafficshadowclient1.alternates") {
		var alternateServiceDetail config.AlternateServiceDetail
		deps.Default.Config.MustGetStruct("clients.trafficshadowclient1.alternates", &alternateServiceDetail)
		for _, routingConfig := range alternateServiceDetail.RoutingConfigs {
			whitelistedDynamicHeaders = append(whitelistedDynamicHeaders, textproto.CanonicalMIMEHeaderKey(routingConfig.HeaderName))
		}
	}

	return &trafficshadowHelloWorldWorkflow{
		Clients:                   deps.Client,
		Logger:                    deps.Default.Logger,
		whitelistedDynamicHeaders: whitelistedDynamicHeaders,
	}
}

// trafficshadowHelloWorldWorkflow calls thrift client Trafficshadowclient1.Hello
type trafficshadowHelloWorldWorkflow struct {
	Clients                   *module.ClientDependencies
	Logger                    *zap.Logger
	whitelistedDynamicHeaders []string
}

// Handle calls thrift client.
func (w trafficshadowHelloWorldWorkflow) Handle(
	ctx context.Context,
	reqHeaders zanzibar.Header,
) (*endpointsIDlEndpointsTrafficshadowTrafficshadow.TrafficShadowResponse, zanzibar.Header, error) {

	clientHeaders := map[string]string{}

	var ok bool
	var h string
	var k string

	k = textproto.CanonicalMIMEHeaderKey("x-uber-foo")
	h, ok = reqHeaders.Get(k)
	if ok {
		clientHeaders[k] = h
	}
	k = textproto.CanonicalMIMEHeaderKey("x-uber-bar")
	h, ok = reqHeaders.Get(k)
	if ok {
		clientHeaders[k] = h
	}

	h, ok = reqHeaders.Get("X-Deputy-Forwarded")
	if ok {
		clientHeaders["X-Deputy-Forwarded"] = h
	}
	for _, whitelistedHeader := range w.whitelistedDynamicHeaders {
		headerVal, ok := reqHeaders.Get(whitelistedHeader)
		if ok {
			clientHeaders[whitelistedHeader] = headerVal
		}
	}

	h, ok = reqHeaders.Get("X-Uber-Shadow-Client")

	resHeaders := zanzibar.ServerTChannelHeader{}
	if ok {
		clientRespBody, _, _ := w.Clients.Trafficshadowclient2.Hello(
			ctx, clientHeaders,
		)
		response := convertTrafficshadowclient2HelloWorldClientResponse(clientRespBody)
		return response, resHeaders, nil
	} else {
		clientRespBody, _, _ := w.Clients.Trafficshadowclient1.Hello(
			ctx, clientHeaders,
		)
		response := convertTrafficshadowclient1HelloWorldClientResponse(clientRespBody)
		return response, resHeaders, nil
	}
}

func convertTrafficshadowclient1HelloWorldClientResponse(in *clientsIDlClientsTrafficshadowclient1Trafficshadowclient1.TrafficShadowClient1Response) *endpointsIDlEndpointsTrafficshadowTrafficshadow.TrafficShadowResponse {
	out := &endpointsIDlEndpointsTrafficshadowTrafficshadow.TrafficShadowResponse{}

	out.ResField = string(in.ResField1)

	return out
}

func convertTrafficshadowclient2HelloWorldClientResponse(in *clientsIDlClientsTrafficshadowclient2Trafficshadowclient2.TrafficShadowClient2Response) *endpointsIDlEndpointsTrafficshadowTrafficshadow.TrafficShadowResponse {
	out := &endpointsIDlEndpointsTrafficshadowTrafficshadow.TrafficShadowResponse{}

	out.ResField = string(in.ResField2)

	return out
}
