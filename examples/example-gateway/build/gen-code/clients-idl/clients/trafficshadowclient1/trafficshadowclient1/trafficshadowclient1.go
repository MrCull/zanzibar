// Code generated by thriftrw v1.23.0. DO NOT EDIT.
// @generated

package trafficshadowclient1

import (
	errors "errors"
	fmt "fmt"
	strings "strings"

	multierr "go.uber.org/multierr"
	wire "go.uber.org/thriftrw/wire"
	zapcore "go.uber.org/zap/zapcore"
)

type Long int64

// LongPtr returns a pointer to a Long
func (v Long) Ptr() *Long {
	return &v
}

// ToWire translates Long into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
func (v Long) ToWire() (wire.Value, error) {
	x := (int64)(v)
	return wire.NewValueI64(x), error(nil)
}

// String returns a readable string representation of Long.
func (v Long) String() string {
	x := (int64)(v)
	return fmt.Sprint(x)
}

// FromWire deserializes Long from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
func (v *Long) FromWire(w wire.Value) error {
	x, err := w.GetI64(), error(nil)
	*v = (Long)(x)
	return err
}

// Equals returns true if this Long is equal to the provided
// Long.
func (lhs Long) Equals(rhs Long) bool {
	return ((int64)(lhs) == (int64)(rhs))
}

type SeeOthersRedirection struct {
}

// ToWire translates a SeeOthersRedirection struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *SeeOthersRedirection) ToWire() (wire.Value, error) {
	var (
		fields [0]wire.Field
		i      int = 0
	)

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a SeeOthersRedirection struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a SeeOthersRedirection struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v SeeOthersRedirection
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *SeeOthersRedirection) FromWire(w wire.Value) error {

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		}
	}

	return nil
}

// String returns a readable string representation of a SeeOthersRedirection
// struct.
func (v *SeeOthersRedirection) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [0]string
	i := 0

	return fmt.Sprintf("SeeOthersRedirection{%v}", strings.Join(fields[:i], ", "))
}

// ErrorName is the name of this type as defined in the Thrift
// file.
func (*SeeOthersRedirection) ErrorName() string {
	return "SeeOthersRedirection"
}

// Equals returns true if all the fields of this SeeOthersRedirection match the
// provided SeeOthersRedirection.
//
// This function performs a deep comparison.
func (v *SeeOthersRedirection) Equals(rhs *SeeOthersRedirection) bool {
	if v == nil {
		return rhs == nil
	} else if rhs == nil {
		return false
	}

	return true
}

// MarshalLogObject implements zapcore.ObjectMarshaler, enabling
// fast logging of SeeOthersRedirection.
func (v *SeeOthersRedirection) MarshalLogObject(enc zapcore.ObjectEncoder) (err error) {
	if v == nil {
		return nil
	}
	return err
}

func (v *SeeOthersRedirection) Error() string {
	return v.String()
}

type _List_String_ValueList []string

func (v _List_String_ValueList) ForEach(f func(wire.Value) error) error {
	for _, x := range v {
		w, err := wire.NewValueString(x), error(nil)
		if err != nil {
			return err
		}
		err = f(w)
		if err != nil {
			return err
		}
	}
	return nil
}

func (v _List_String_ValueList) Size() int {
	return len(v)
}

func (_List_String_ValueList) ValueType() wire.Type {
	return wire.TBinary
}

func (_List_String_ValueList) Close() {}

func _List_String_Read(l wire.ValueList) ([]string, error) {
	if l.ValueType() != wire.TBinary {
		return nil, nil
	}

	o := make([]string, 0, l.Size())
	err := l.ForEach(func(x wire.Value) error {
		i, err := x.GetString(), error(nil)
		if err != nil {
			return err
		}
		o = append(o, i)
		return nil
	})
	l.Close()
	return o, err
}

func _List_String_Equals(lhs, rhs []string) bool {
	if len(lhs) != len(rhs) {
		return false
	}

	for i, lv := range lhs {
		rv := rhs[i]
		if !(lv == rv) {
			return false
		}
	}

	return true
}

type _List_String_Zapper []string

// MarshalLogArray implements zapcore.ArrayMarshaler, enabling
// fast logging of _List_String_Zapper.
func (l _List_String_Zapper) MarshalLogArray(enc zapcore.ArrayEncoder) (err error) {
	for _, v := range l {
		enc.AppendString(v)
	}
	return err
}

type StringList []string

// ToWire translates StringList into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
func (v StringList) ToWire() (wire.Value, error) {
	x := ([]string)(v)
	return wire.NewValueList(_List_String_ValueList(x)), error(nil)
}

// String returns a readable string representation of StringList.
func (v StringList) String() string {
	x := ([]string)(v)
	return fmt.Sprint(x)
}

// FromWire deserializes StringList from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
func (v *StringList) FromWire(w wire.Value) error {
	x, err := _List_String_Read(w.GetList())
	*v = (StringList)(x)
	return err
}

// Equals returns true if this StringList is equal to the provided
// StringList.
func (lhs StringList) Equals(rhs StringList) bool {
	return _List_String_Equals(([]string)(lhs), ([]string)(rhs))
}

func (v StringList) MarshalLogArray(enc zapcore.ArrayEncoder) error {
	return ((_List_String_Zapper)(([]string)(v))).MarshalLogArray(enc)
}

type Timestamp int64

// TimestampPtr returns a pointer to a Timestamp
func (v Timestamp) Ptr() *Timestamp {
	return &v
}

// ToWire translates Timestamp into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
func (v Timestamp) ToWire() (wire.Value, error) {
	x := (int64)(v)
	return wire.NewValueI64(x), error(nil)
}

// String returns a readable string representation of Timestamp.
func (v Timestamp) String() string {
	x := (int64)(v)
	return fmt.Sprint(x)
}

// FromWire deserializes Timestamp from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
func (v *Timestamp) FromWire(w wire.Value) error {
	x, err := w.GetI64(), error(nil)
	*v = (Timestamp)(x)
	return err
}

// Equals returns true if this Timestamp is equal to the provided
// Timestamp.
func (lhs Timestamp) Equals(rhs Timestamp) bool {
	return ((int64)(lhs) == (int64)(rhs))
}

type TrafficShadowClient1Response struct {
	ResField1 string `json:"resField1,required"`
}

// ToWire translates a TrafficShadowClient1Response struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *TrafficShadowClient1Response) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	w, err = wire.NewValueString(v.ResField1), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 1, Value: w}
	i++

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a TrafficShadowClient1Response struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a TrafficShadowClient1Response struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v TrafficShadowClient1Response
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *TrafficShadowClient1Response) FromWire(w wire.Value) error {
	var err error

	resField1IsSet := false

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBinary {
				v.ResField1, err = field.Value.GetString(), error(nil)
				if err != nil {
					return err
				}
				resField1IsSet = true
			}
		}
	}

	if !resField1IsSet {
		return errors.New("field ResField1 of TrafficShadowClient1Response is required")
	}

	return nil
}

// String returns a readable string representation of a TrafficShadowClient1Response
// struct.
func (v *TrafficShadowClient1Response) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [1]string
	i := 0
	fields[i] = fmt.Sprintf("ResField1: %v", v.ResField1)
	i++

	return fmt.Sprintf("TrafficShadowClient1Response{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this TrafficShadowClient1Response match the
// provided TrafficShadowClient1Response.
//
// This function performs a deep comparison.
func (v *TrafficShadowClient1Response) Equals(rhs *TrafficShadowClient1Response) bool {
	if v == nil {
		return rhs == nil
	} else if rhs == nil {
		return false
	}
	if !(v.ResField1 == rhs.ResField1) {
		return false
	}

	return true
}

// MarshalLogObject implements zapcore.ObjectMarshaler, enabling
// fast logging of TrafficShadowClient1Response.
func (v *TrafficShadowClient1Response) MarshalLogObject(enc zapcore.ObjectEncoder) (err error) {
	if v == nil {
		return nil
	}
	enc.AddString("resField1", v.ResField1)
	return err
}

// GetResField1 returns the value of ResField1 if it is set or its
// zero value if it is unset.
func (v *TrafficShadowClient1Response) GetResField1() (o string) {
	if v != nil {
		o = v.ResField1
	}
	return
}

type TrafficShadowException struct {
	StringField string `json:"stringField,required"`
}

// ToWire translates a TrafficShadowException struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *TrafficShadowException) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	w, err = wire.NewValueString(v.StringField), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 1, Value: w}
	i++

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a TrafficShadowException struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a TrafficShadowException struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v TrafficShadowException
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *TrafficShadowException) FromWire(w wire.Value) error {
	var err error

	stringFieldIsSet := false

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBinary {
				v.StringField, err = field.Value.GetString(), error(nil)
				if err != nil {
					return err
				}
				stringFieldIsSet = true
			}
		}
	}

	if !stringFieldIsSet {
		return errors.New("field StringField of TrafficShadowException is required")
	}

	return nil
}

// String returns a readable string representation of a TrafficShadowException
// struct.
func (v *TrafficShadowException) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [1]string
	i := 0
	fields[i] = fmt.Sprintf("StringField: %v", v.StringField)
	i++

	return fmt.Sprintf("TrafficShadowException{%v}", strings.Join(fields[:i], ", "))
}

// ErrorName is the name of this type as defined in the Thrift
// file.
func (*TrafficShadowException) ErrorName() string {
	return "TrafficShadowException"
}

// Equals returns true if all the fields of this TrafficShadowException match the
// provided TrafficShadowException.
//
// This function performs a deep comparison.
func (v *TrafficShadowException) Equals(rhs *TrafficShadowException) bool {
	if v == nil {
		return rhs == nil
	} else if rhs == nil {
		return false
	}
	if !(v.StringField == rhs.StringField) {
		return false
	}

	return true
}

// MarshalLogObject implements zapcore.ObjectMarshaler, enabling
// fast logging of TrafficShadowException.
func (v *TrafficShadowException) MarshalLogObject(enc zapcore.ObjectEncoder) (err error) {
	if v == nil {
		return nil
	}
	enc.AddString("stringField", v.StringField)
	return err
}

// GetStringField returns the value of StringField if it is set or its
// zero value if it is unset.
func (v *TrafficShadowException) GetStringField() (o string) {
	if v != nil {
		o = v.StringField
	}
	return
}

func (v *TrafficShadowException) Error() string {
	return v.String()
}

type UUID string

// UUIDPtr returns a pointer to a UUID
func (v UUID) Ptr() *UUID {
	return &v
}

// ToWire translates UUID into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
func (v UUID) ToWire() (wire.Value, error) {
	x := (string)(v)
	return wire.NewValueString(x), error(nil)
}

// String returns a readable string representation of UUID.
func (v UUID) String() string {
	x := (string)(v)
	return fmt.Sprint(x)
}

// FromWire deserializes UUID from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
func (v *UUID) FromWire(w wire.Value) error {
	x, err := w.GetString(), error(nil)
	*v = (UUID)(x)
	return err
}

// Equals returns true if this UUID is equal to the provided
// UUID.
func (lhs UUID) Equals(rhs UUID) bool {
	return ((string)(lhs) == (string)(rhs))
}

type _List_UUID_ValueList []UUID

func (v _List_UUID_ValueList) ForEach(f func(wire.Value) error) error {
	for _, x := range v {
		w, err := x.ToWire()
		if err != nil {
			return err
		}
		err = f(w)
		if err != nil {
			return err
		}
	}
	return nil
}

func (v _List_UUID_ValueList) Size() int {
	return len(v)
}

func (_List_UUID_ValueList) ValueType() wire.Type {
	return wire.TBinary
}

func (_List_UUID_ValueList) Close() {}

func _UUID_Read(w wire.Value) (UUID, error) {
	var x UUID
	err := x.FromWire(w)
	return x, err
}

func _List_UUID_Read(l wire.ValueList) ([]UUID, error) {
	if l.ValueType() != wire.TBinary {
		return nil, nil
	}

	o := make([]UUID, 0, l.Size())
	err := l.ForEach(func(x wire.Value) error {
		i, err := _UUID_Read(x)
		if err != nil {
			return err
		}
		o = append(o, i)
		return nil
	})
	l.Close()
	return o, err
}

func _List_UUID_Equals(lhs, rhs []UUID) bool {
	if len(lhs) != len(rhs) {
		return false
	}

	for i, lv := range lhs {
		rv := rhs[i]
		if !(lv == rv) {
			return false
		}
	}

	return true
}

type _List_UUID_Zapper []UUID

// MarshalLogArray implements zapcore.ArrayMarshaler, enabling
// fast logging of _List_UUID_Zapper.
func (l _List_UUID_Zapper) MarshalLogArray(enc zapcore.ArrayEncoder) (err error) {
	for _, v := range l {
		enc.AppendString((string)(v))
	}
	return err
}

type UUIDList []UUID

// ToWire translates UUIDList into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
func (v UUIDList) ToWire() (wire.Value, error) {
	x := ([]UUID)(v)
	return wire.NewValueList(_List_UUID_ValueList(x)), error(nil)
}

// String returns a readable string representation of UUIDList.
func (v UUIDList) String() string {
	x := ([]UUID)(v)
	return fmt.Sprint(x)
}

// FromWire deserializes UUIDList from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
func (v *UUIDList) FromWire(w wire.Value) error {
	x, err := _List_UUID_Read(w.GetList())
	*v = (UUIDList)(x)
	return err
}

// Equals returns true if this UUIDList is equal to the provided
// UUIDList.
func (lhs UUIDList) Equals(rhs UUIDList) bool {
	return _List_UUID_Equals(([]UUID)(lhs), ([]UUID)(rhs))
}

func (v UUIDList) MarshalLogArray(enc zapcore.ArrayEncoder) error {
	return ((_List_UUID_Zapper)(([]UUID)(v))).MarshalLogArray(enc)
}

// Trafficshadowclient1_HelloWorld_Args represents the arguments for the Trafficshadowclient1.helloWorld function.
//
// The arguments for helloWorld are sent and received over the wire as this struct.
type Trafficshadowclient1_HelloWorld_Args struct {
}

// ToWire translates a Trafficshadowclient1_HelloWorld_Args struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *Trafficshadowclient1_HelloWorld_Args) ToWire() (wire.Value, error) {
	var (
		fields [0]wire.Field
		i      int = 0
	)

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a Trafficshadowclient1_HelloWorld_Args struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a Trafficshadowclient1_HelloWorld_Args struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v Trafficshadowclient1_HelloWorld_Args
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *Trafficshadowclient1_HelloWorld_Args) FromWire(w wire.Value) error {

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		}
	}

	return nil
}

// String returns a readable string representation of a Trafficshadowclient1_HelloWorld_Args
// struct.
func (v *Trafficshadowclient1_HelloWorld_Args) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [0]string
	i := 0

	return fmt.Sprintf("Trafficshadowclient1_HelloWorld_Args{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this Trafficshadowclient1_HelloWorld_Args match the
// provided Trafficshadowclient1_HelloWorld_Args.
//
// This function performs a deep comparison.
func (v *Trafficshadowclient1_HelloWorld_Args) Equals(rhs *Trafficshadowclient1_HelloWorld_Args) bool {
	if v == nil {
		return rhs == nil
	} else if rhs == nil {
		return false
	}

	return true
}

// MarshalLogObject implements zapcore.ObjectMarshaler, enabling
// fast logging of Trafficshadowclient1_HelloWorld_Args.
func (v *Trafficshadowclient1_HelloWorld_Args) MarshalLogObject(enc zapcore.ObjectEncoder) (err error) {
	if v == nil {
		return nil
	}
	return err
}

// MethodName returns the name of the Thrift function as specified in
// the IDL, for which this struct represent the arguments.
//
// This will always be "helloWorld" for this struct.
func (v *Trafficshadowclient1_HelloWorld_Args) MethodName() string {
	return "helloWorld"
}

// EnvelopeType returns the kind of value inside this struct.
//
// This will always be Call for this struct.
func (v *Trafficshadowclient1_HelloWorld_Args) EnvelopeType() wire.EnvelopeType {
	return wire.Call
}

// Trafficshadowclient1_HelloWorld_Helper provides functions that aid in handling the
// parameters and return values of the Trafficshadowclient1.helloWorld
// function.
var Trafficshadowclient1_HelloWorld_Helper = struct {
	// Args accepts the parameters of helloWorld in-order and returns
	// the arguments struct for the function.
	Args func() *Trafficshadowclient1_HelloWorld_Args

	// IsException returns true if the given error can be thrown
	// by helloWorld.
	//
	// An error can be thrown by helloWorld only if the
	// corresponding exception type was mentioned in the 'throws'
	// section for it in the Thrift file.
	IsException func(error) bool

	// WrapResponse returns the result struct for helloWorld
	// given its return value and error.
	//
	// This allows mapping values and errors returned by
	// helloWorld into a serializable result struct.
	// WrapResponse returns a non-nil error if the provided
	// error cannot be thrown by helloWorld
	//
	//   value, err := helloWorld(args)
	//   result, err := Trafficshadowclient1_HelloWorld_Helper.WrapResponse(value, err)
	//   if err != nil {
	//     return fmt.Errorf("unexpected error from helloWorld: %v", err)
	//   }
	//   serialize(result)
	WrapResponse func(*TrafficShadowClient1Response, error) (*Trafficshadowclient1_HelloWorld_Result, error)

	// UnwrapResponse takes the result struct for helloWorld
	// and returns the value or error returned by it.
	//
	// The error is non-nil only if helloWorld threw an
	// exception.
	//
	//   result := deserialize(bytes)
	//   value, err := Trafficshadowclient1_HelloWorld_Helper.UnwrapResponse(result)
	UnwrapResponse func(*Trafficshadowclient1_HelloWorld_Result) (*TrafficShadowClient1Response, error)
}{}

func init() {
	Trafficshadowclient1_HelloWorld_Helper.Args = func() *Trafficshadowclient1_HelloWorld_Args {
		return &Trafficshadowclient1_HelloWorld_Args{}
	}

	Trafficshadowclient1_HelloWorld_Helper.IsException = func(err error) bool {
		switch err.(type) {
		case *TrafficShadowException:
			return true
		case *SeeOthersRedirection:
			return true
		default:
			return false
		}
	}

	Trafficshadowclient1_HelloWorld_Helper.WrapResponse = func(success *TrafficShadowClient1Response, err error) (*Trafficshadowclient1_HelloWorld_Result, error) {
		if err == nil {
			return &Trafficshadowclient1_HelloWorld_Result{Success: success}, nil
		}

		switch e := err.(type) {
		case *TrafficShadowException:
			if e == nil {
				return nil, errors.New("WrapResponse received non-nil error type with nil value for Trafficshadowclient1_HelloWorld_Result.TrafficShadowException")
			}
			return &Trafficshadowclient1_HelloWorld_Result{TrafficShadowException: e}, nil
		case *SeeOthersRedirection:
			if e == nil {
				return nil, errors.New("WrapResponse received non-nil error type with nil value for Trafficshadowclient1_HelloWorld_Result.SeeOthersRedirection")
			}
			return &Trafficshadowclient1_HelloWorld_Result{SeeOthersRedirection: e}, nil
		}

		return nil, err
	}
	Trafficshadowclient1_HelloWorld_Helper.UnwrapResponse = func(result *Trafficshadowclient1_HelloWorld_Result) (success *TrafficShadowClient1Response, err error) {
		if result.TrafficShadowException != nil {
			err = result.TrafficShadowException
			return
		}
		if result.SeeOthersRedirection != nil {
			err = result.SeeOthersRedirection
			return
		}

		if result.Success != nil {
			success = result.Success
			return
		}

		err = errors.New("expected a non-void result")
		return
	}

}

// Trafficshadowclient1_HelloWorld_Result represents the result of a Trafficshadowclient1.helloWorld function call.
//
// The result of a helloWorld execution is sent and received over the wire as this struct.
//
// Success is set only if the function did not throw an exception.
type Trafficshadowclient1_HelloWorld_Result struct {
	// Value returned by helloWorld after a successful execution.
	Success                *TrafficShadowClient1Response `json:"success,omitempty"`
	TrafficShadowException *TrafficShadowException       `json:"trafficShadowException,omitempty"`
	SeeOthersRedirection   *SeeOthersRedirection         `json:"seeOthersRedirection,omitempty"`
}

// ToWire translates a Trafficshadowclient1_HelloWorld_Result struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *Trafficshadowclient1_HelloWorld_Result) ToWire() (wire.Value, error) {
	var (
		fields [3]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Success != nil {
		w, err = v.Success.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 0, Value: w}
		i++
	}
	if v.TrafficShadowException != nil {
		w, err = v.TrafficShadowException.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	if v.SeeOthersRedirection != nil {
		w, err = v.SeeOthersRedirection.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 2, Value: w}
		i++
	}

	if i != 1 {
		return wire.Value{}, fmt.Errorf("Trafficshadowclient1_HelloWorld_Result should have exactly one field: got %v fields", i)
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _TrafficShadowClient1Response_Read(w wire.Value) (*TrafficShadowClient1Response, error) {
	var v TrafficShadowClient1Response
	err := v.FromWire(w)
	return &v, err
}

func _TrafficShadowException_Read(w wire.Value) (*TrafficShadowException, error) {
	var v TrafficShadowException
	err := v.FromWire(w)
	return &v, err
}

func _SeeOthersRedirection_Read(w wire.Value) (*SeeOthersRedirection, error) {
	var v SeeOthersRedirection
	err := v.FromWire(w)
	return &v, err
}

// FromWire deserializes a Trafficshadowclient1_HelloWorld_Result struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a Trafficshadowclient1_HelloWorld_Result struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v Trafficshadowclient1_HelloWorld_Result
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *Trafficshadowclient1_HelloWorld_Result) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 0:
			if field.Value.Type() == wire.TStruct {
				v.Success, err = _TrafficShadowClient1Response_Read(field.Value)
				if err != nil {
					return err
				}

			}
		case 1:
			if field.Value.Type() == wire.TStruct {
				v.TrafficShadowException, err = _TrafficShadowException_Read(field.Value)
				if err != nil {
					return err
				}

			}
		case 2:
			if field.Value.Type() == wire.TStruct {
				v.SeeOthersRedirection, err = _SeeOthersRedirection_Read(field.Value)
				if err != nil {
					return err
				}

			}
		}
	}

	count := 0
	if v.Success != nil {
		count++
	}
	if v.TrafficShadowException != nil {
		count++
	}
	if v.SeeOthersRedirection != nil {
		count++
	}
	if count != 1 {
		return fmt.Errorf("Trafficshadowclient1_HelloWorld_Result should have exactly one field: got %v fields", count)
	}

	return nil
}

// String returns a readable string representation of a Trafficshadowclient1_HelloWorld_Result
// struct.
func (v *Trafficshadowclient1_HelloWorld_Result) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [3]string
	i := 0
	if v.Success != nil {
		fields[i] = fmt.Sprintf("Success: %v", v.Success)
		i++
	}
	if v.TrafficShadowException != nil {
		fields[i] = fmt.Sprintf("TrafficShadowException: %v", v.TrafficShadowException)
		i++
	}
	if v.SeeOthersRedirection != nil {
		fields[i] = fmt.Sprintf("SeeOthersRedirection: %v", v.SeeOthersRedirection)
		i++
	}

	return fmt.Sprintf("Trafficshadowclient1_HelloWorld_Result{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this Trafficshadowclient1_HelloWorld_Result match the
// provided Trafficshadowclient1_HelloWorld_Result.
//
// This function performs a deep comparison.
func (v *Trafficshadowclient1_HelloWorld_Result) Equals(rhs *Trafficshadowclient1_HelloWorld_Result) bool {
	if v == nil {
		return rhs == nil
	} else if rhs == nil {
		return false
	}
	if !((v.Success == nil && rhs.Success == nil) || (v.Success != nil && rhs.Success != nil && v.Success.Equals(rhs.Success))) {
		return false
	}
	if !((v.TrafficShadowException == nil && rhs.TrafficShadowException == nil) || (v.TrafficShadowException != nil && rhs.TrafficShadowException != nil && v.TrafficShadowException.Equals(rhs.TrafficShadowException))) {
		return false
	}
	if !((v.SeeOthersRedirection == nil && rhs.SeeOthersRedirection == nil) || (v.SeeOthersRedirection != nil && rhs.SeeOthersRedirection != nil && v.SeeOthersRedirection.Equals(rhs.SeeOthersRedirection))) {
		return false
	}

	return true
}

// MarshalLogObject implements zapcore.ObjectMarshaler, enabling
// fast logging of Trafficshadowclient1_HelloWorld_Result.
func (v *Trafficshadowclient1_HelloWorld_Result) MarshalLogObject(enc zapcore.ObjectEncoder) (err error) {
	if v == nil {
		return nil
	}
	if v.Success != nil {
		err = multierr.Append(err, enc.AddObject("success", v.Success))
	}
	if v.TrafficShadowException != nil {
		err = multierr.Append(err, enc.AddObject("trafficShadowException", v.TrafficShadowException))
	}
	if v.SeeOthersRedirection != nil {
		err = multierr.Append(err, enc.AddObject("seeOthersRedirection", v.SeeOthersRedirection))
	}
	return err
}

// GetSuccess returns the value of Success if it is set or its
// zero value if it is unset.
func (v *Trafficshadowclient1_HelloWorld_Result) GetSuccess() (o *TrafficShadowClient1Response) {
	if v != nil && v.Success != nil {
		return v.Success
	}

	return
}

// IsSetSuccess returns true if Success is not nil.
func (v *Trafficshadowclient1_HelloWorld_Result) IsSetSuccess() bool {
	return v != nil && v.Success != nil
}

// GetTrafficShadowException returns the value of TrafficShadowException if it is set or its
// zero value if it is unset.
func (v *Trafficshadowclient1_HelloWorld_Result) GetTrafficShadowException() (o *TrafficShadowException) {
	if v != nil && v.TrafficShadowException != nil {
		return v.TrafficShadowException
	}

	return
}

// IsSetTrafficShadowException returns true if TrafficShadowException is not nil.
func (v *Trafficshadowclient1_HelloWorld_Result) IsSetTrafficShadowException() bool {
	return v != nil && v.TrafficShadowException != nil
}

// GetSeeOthersRedirection returns the value of SeeOthersRedirection if it is set or its
// zero value if it is unset.
func (v *Trafficshadowclient1_HelloWorld_Result) GetSeeOthersRedirection() (o *SeeOthersRedirection) {
	if v != nil && v.SeeOthersRedirection != nil {
		return v.SeeOthersRedirection
	}

	return
}

// IsSetSeeOthersRedirection returns true if SeeOthersRedirection is not nil.
func (v *Trafficshadowclient1_HelloWorld_Result) IsSetSeeOthersRedirection() bool {
	return v != nil && v.SeeOthersRedirection != nil
}

// MethodName returns the name of the Thrift function as specified in
// the IDL, for which this struct represent the result.
//
// This will always be "helloWorld" for this struct.
func (v *Trafficshadowclient1_HelloWorld_Result) MethodName() string {
	return "helloWorld"
}

// EnvelopeType returns the kind of value inside this struct.
//
// This will always be Reply for this struct.
func (v *Trafficshadowclient1_HelloWorld_Result) EnvelopeType() wire.EnvelopeType {
	return wire.Reply
}
